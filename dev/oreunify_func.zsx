/*
val ironOreItems = ["minecraft:iron", "iron"] as string [];
val goldOreItems = ["minecraft:gold", "gold"] as string [];
val copperOreItems = ["create:copper", "copper"] as string [];
val zincOreItems = ["create:zinc", "zinc"] as string [];
val oreArray = [ironOreItems,goldOreItems,copperOreItems,zincOreItems] as string[][];
val pebbleTypes = ["cobblestone","andesite","diorite","granite"] as string[];
val recipeTypes = ["grinding","milling","crushing"] as string[];
val i = 0;
val j = 0;
val recipeNameBuilder = [] as String[]; 
for row in oreArray {
	for j in recipeTypeArray {
		recipeNameBuilder += (recipeTypes[j] + "_" + oreArray[row][1]);
		j++
	};
	mods.grinder.Grinder.addRecipe(new mods.grinder.RecipeBuilder(recipeNameBuilder[0]).input(<item:exnihilosequentia:chunk_(oreArray[row][1])>).output(<item:create:crushed_(oreArray[row][1])_ore> * 2));
	<recipetype:create:milling>.addRecipe(recipeNameBuilder[1], [<item:create:crushed_(oreArray[i][1])_ore>, <item:create:crushed_(oreArray[row][1])_ore> % 45], <item:exnihilosequentia:chunk_(oreArray[row][1])>);
	<recipetype:create:crushing>.addRecipe(recipeNameBuilder[2]. [<item:create:crushed_(oreArray[i][1])_ore>, <item:create:crushed_(oreArray[row][1])_ore> % 80], [<item:exnihilosequentia:chunk_(oreArray[row][1])>]);
}
for row in pebbleTypes {
	j = 0;
	for j in recipeTypeArray {
		recipeNameBuilder += (recipeTypes[j] + "_" + pebbleTypes[row]);
	j++
	};
}
*/